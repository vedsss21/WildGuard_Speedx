/**
 * @description This ruleset enforces a strict user-ownership model for rangers and allows public read access to device statuses.
 *   Incidents can be created, updated, and deleted by anyone. Ranger records are secured so that only the ranger can modify their own data.
 * @dataStructure
 *   /rangers/{rangerId}: Stores ranger information, accessible only by the ranger themselves.
 *   /incidents/{incidentId}: Stores incident reports.
 *   /device-status/{deviceId}: Stores the real-time status of devices; publicly readable.
 * @keySecurityDecisions
 *   - Rangers can only read and modify their own ranger document.
 *   - Device status information is publicly readable to facilitate real-time updates on the dashboard.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to ranger documents, ensuring that only the ranger can read and modify their own data.
     * @path /rangers/{rangerId}
     * @allow (get, update, delete) if the request is made by the ranger with matching rangerId.
     * @allow (create) if the request is made by the ranger with matching rangerId, and the rangerId in the document matches the authenticated user ID.
     * @deny (get, list, create, update, delete) if the request is not made by the ranger with matching rangerId.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /rangers/{rangerId} {
      // Test user making the request is authenticated (logged in).
      function isSignedIn() {
        return request.auth != null;
      }

      // Test that the request is made by the owner.
      function isOwner(rangerId) {
        return request.auth.uid == rangerId;
      }

      // Test that the request is made by the existing owner.
      function isExistingOwner(rangerId) {
        return isOwner(rangerId) && resource != null;
      }

      allow get: if isOwner(rangerId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == rangerId;
      allow update: if isExistingOwner(rangerId);
      allow delete: if isExistingOwner(rangerId);
    }

    /**
     * @description Controls access to incident documents.  Allows any logged in user to create, get, update or delete any incident.
     * @path /incidents/{incidentId}
     * @allow (get, list, create, update, delete) any authenticated user.
     * @deny none.
     * @principle none.
     */
    match /incidents/{incidentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to device status documents.
     * @path /device-status/{deviceId}
     * @allow (get, list) any user, even unauthenticated users.
     * @deny (create, update, delete) all users.
     * @principle Allows public read access while restricting write access.
     */
    match /device-status/{deviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}